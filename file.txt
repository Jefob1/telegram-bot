telegram bot token:
6327532337:AAHz0tsxOjPbzQKL-Sqf6aR9ro7MSmWT06Q
group id:
-643858984
account id:
8ad885ac4be1ba4bc469f5afddc27de2
webhook url:
https://stash-ng-bot.jenukohafobi.workers.dev
twilio recovery key:
WNvOTNyq3XJowAytfeAXjBQPQtXqmDJGQ_g03Y4T
twilio auth token:
2ff95c0dd45485b4f08f4e5d1e3f8289
twilio acount sid:
AC8785d4cc3ad53df76ba03b24207330c4
twilio number:
+14155238886
telegram api:
https://api.telegram.org/bot6327532337:AAHz0tsxOjPbzQKL-Sqf6aR9ro7MSmWT06Q



TODO:
bot.command("/pay", (ctx) => {
  const cart = ctx.session.cart;

  if (cart.length > 0) {
    ctx.reply("Please enter your email address:");
    ctx.session.payStep = "email";
  } else {
    ctx.reply("Your cart is empty. Select products first.");
  }
});

bot.on("text", (ctx) => {
  const messageText = ctx.message.text;
  const payStep = ctx.session.payStep;

  if (payStep === "email") {
    ctx.message.email = messageText;
    ctx.reply("Please enter your phone number:");
    ctx.session.payStep = "phone";
  } else if (payStep === "phone") {
    ctx.session.payStep = messageText;
    ctx.reply("Please enter your address:");
    ctx.session.payStep = "address";
  } else if ((payStep = "address")) {
    ctx.session.address = messageText;
    processPayment(ctx);
  }
});

function processPayment(ctx) {
  const cart = ctx.session.cart;
  const email = ctx.session.email;
  const phone = ctx.session.phone;
  const address = ctx.session.address;

  const referenceId = generateReferenceId();

  const totalPrice = art.reduce(
    (total, productWithQuantity) =>
      total + productWithQuantity.product.price * productWithQuantity.quantity,
    0
  );

  const orderDetails = {
    referenceId: referenceId,
    email: email,
    phone: phone,
    address: address,
    total: totalPrice,
    products: cart.map((productWithQuantity) => ({
      name: productWithQuantity.product.name,
      quantity: productWithQuantity.quantity,
      price: productWithQuantity.product.price,
    })),
  };
  axios
    .post(
      "https://github.com/Jefob1/telegram-bot/blob/main/saveOrder.php",
      orderDetails
    )
    .then((response) => {
      console.log(response.data);
      const paymentUrl = generatePaystackPaymentUrl(referenceId, totalPrice);
      ctx.reply(`Please proceed to make payment: ${paymentUrl}`);
      ctx.session.orderDetails = orderDetails;
    })
    .catch((error) => {
      console.error("Error saving order details:", error);
      ctx.reply(
        "An error occurred while processing your order. Please try again."
      );
    });
}
function generatePaymentUrl(referenceId, totalPrice) {
  const params = new URLSearchParams({
    reference: referenceId,
    amount: totalPrice * 100,
    callback_url: paystackCallbackUrl,
    metadata: JSON.stringify({referenceId: referenceId}),
  });
  return `https:paystack.com/pay/pk_live_d30b1417c33e8562ae1d7df2d7aee117d9250136?${params.toString()}`;
}

expressApp.post("/paystack-callback", (req, res) => {
  const {reference, status} = req.body;

  if (status === "success") {
    const orderDetails = ctx.session.orderDetails;
    sendOrderDetailsToWhatsApp(orderDetails);
    ctx.reply(
      `Payment succesful! Your order has been placed.\n\nOrder Details:\n${formatOrderDetails(
        orderDetails
      )}`
    );
  } else {
    ctx.reply("Payment failed. Please try again.");
  }
  res.sendStatus(200);
});

function sendOrderDetailsToWhatsApp(orderDetails) {}